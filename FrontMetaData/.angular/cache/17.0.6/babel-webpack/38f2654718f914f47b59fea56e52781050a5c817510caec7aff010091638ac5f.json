{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/dialog\";\nexport class UploadService {\n  constructor(http, dialog) {\n    this.http = http;\n    this.dialog = dialog;\n    this.baseUrl = 'http://localhost:8082/PIDataCatalog/api';\n  }\n  uploadFile(formData) {\n    return this.http.post(`${this.baseUrl}/upload`, formData);\n  }\n  updateColumn(column) {\n    return this.http.put(`${this.baseUrl}/schemas/${column.idColumn}`, column);\n  }\n  updateTags(idColumn, tags) {\n    return this.http.put(`${this.baseUrl}/schemas/${idColumn}/tags`, tags);\n  }\n  static #_ = this.ɵfac = function UploadService_Factory(t) {\n    return new (t || UploadService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatDialog));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UploadService,\n    factory: UploadService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UploadService","constructor","http","dialog","baseUrl","uploadFile","formData","post","updateColumn","column","put","idColumn","updateTags","tags","_","i0","ɵɵinject","i1","HttpClient","i2","MatDialog","_2","factory","ɵfac","providedIn"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\pages\\catalogs\\metadata-imports\\service\\upload.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { Column } from '../models/metadata';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n\n  private baseUrl = 'http://localhost:8082/PIDataCatalog/api';\n\n  constructor(private http: HttpClient, private dialog: MatDialog) {}\n\n  uploadFile(formData: FormData): Observable<any> {\n    return this.http.post(`${this.baseUrl}/upload`, formData);\n  }\n  \n  updateColumn(column: Column): Observable<any> {\n    return this.http.put(`${this.baseUrl}/schemas/${column.idColumn}`, column);\n  }\n\n  updateTags(idColumn: number, tags: string[]): Observable<any> {\n    return this.http.put(`${this.baseUrl}/schemas/${idColumn}/tags`, tags);\n  }\n  \n  \n\n  \n  \n}"],"mappings":";;;AAUA,OAAM,MAAOA,aAAa;EAIxBC,YAAoBC,IAAgB,EAAUC,MAAiB;IAA3C,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,OAAO,GAAG,yCAAyC;EAEO;EAElEC,UAAUA,CAACC,QAAkB;IAC3B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,SAAS,EAAEE,QAAQ,CAAC;EAC3D;EAEAE,YAAYA,CAACC,MAAc;IACzB,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACN,OAAO,YAAYK,MAAM,CAACE,QAAQ,EAAE,EAAEF,MAAM,CAAC;EAC5E;EAEAG,UAAUA,CAACD,QAAgB,EAAEE,IAAc;IACzC,OAAO,IAAI,CAACX,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACN,OAAO,YAAYO,QAAQ,OAAO,EAAEE,IAAI,CAAC;EACxE;EAAC,QAAAC,CAAA,G;qBAhBUd,aAAa,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,SAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbrB,aAAa;IAAAsB,OAAA,EAAbtB,aAAa,CAAAuB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}