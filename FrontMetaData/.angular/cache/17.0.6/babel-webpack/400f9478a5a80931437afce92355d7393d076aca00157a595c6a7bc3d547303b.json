{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthfakeauthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(email, password) {\n    return this.http.post(`/users/authenticate`, {\n      email,\n      password\n    }).pipe(map(user => {\n      // login successful if there's a jwt token in the response\n      if (user && user.token) {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n      }\n      return user;\n    }));\n  }\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  static #_ = this.ɵfac = function AuthfakeauthenticationService_Factory(t) {\n    return new (t || AuthfakeauthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthfakeauthenticationService,\n    factory: AuthfakeauthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","AuthfakeauthenticationService","constructor","http","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","currentUserValue","value","login","email","password","post","pipe","user","token","setItem","stringify","next","logout","removeItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\core\\services\\authfake.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { User } from '../models/auth.models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\nexport class AuthfakeauthenticationService {\r\n    private currentUserSubject: BehaviorSubject<User>;\r\n    public currentUser: Observable<User>;\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\r\n        this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n\r\n    public get currentUserValue(): User {\r\n        return this.currentUserSubject.value;\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        return this.http.post<any>(`/users/authenticate`, { email, password })\r\n            .pipe(map(user => {\r\n                // login successful if there's a jwt token in the response\r\n                if (user && user.token) {\r\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('currentUser', JSON.stringify(user));\r\n                    this.currentUserSubject.next(user);\r\n                }\r\n                return user;\r\n            }));\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n        this.currentUserSubject.next(null);\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,6BAA6B;EAItCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACpB,IAAI,CAACC,kBAAkB,GAAG,IAAIL,eAAe,CAAOM,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;IACpG,IAAI,CAACC,WAAW,GAAG,IAAI,CAACL,kBAAkB,CAACM,YAAY,EAAE;EAC7D;EAEA,IAAWC,gBAAgBA,CAAA;IACvB,OAAO,IAAI,CAACP,kBAAkB,CAACQ,KAAK;EACxC;EAEAC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACjC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAM,qBAAqB,EAAE;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACjEE,IAAI,CAACjB,GAAG,CAACkB,IAAI,IAAG;MACb;MACA,IAAIA,IAAI,IAAIA,IAAI,CAACC,KAAK,EAAE;QACpB;QACAZ,YAAY,CAACa,OAAO,CAAC,aAAa,EAAEf,IAAI,CAACgB,SAAS,CAACH,IAAI,CAAC,CAAC;QACzD,IAAI,CAACd,kBAAkB,CAACkB,IAAI,CAACJ,IAAI,CAAC;;MAEtC,OAAOA,IAAI;IACf,CAAC,CAAC,CAAC;EACX;EAEAK,MAAMA,CAAA;IACF;IACAhB,YAAY,CAACiB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACpB,kBAAkB,CAACkB,IAAI,CAAC,IAAI,CAAC;EACtC;EAAC,QAAAG,CAAA,G;qBA9BQxB,6BAA6B,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAA7B7B,6BAA6B;IAAA8B,OAAA,EAA7B9B,6BAA6B,CAAA+B,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}