{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport Chart from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/services/policy.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"verticalChart\"];\nfunction StatPolicyComponent_li_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const stat_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", stat_r2.key, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", stat_r2.value, \"%\");\n  }\n}\nexport class StatPolicyComponent {\n  constructor(platformId, policyService // Injectez votre service ici\n  ) {\n    this.platformId = platformId;\n    this.policyService = policyService;\n  }\n  ngOnInit() {}\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.createChart();\n    } else {\n      console.log('Skipping chart creation on the server');\n    }\n  }\n  createChart() {\n    const ctx = this.verticalChart.nativeElement.getContext('2d');\n    if (ctx) {\n      this.policyService.getPolicyStatistics().subscribe(data => {\n        this.MapList = data;\n        const labels = Object.keys(data);\n        const chartData = Object.values(data);\n        chartData.push(100);\n        const chart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Statistique Politiques Par ',\n              data: chartData,\n              backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(199, 199, 199, 0.6)', 'rgba(128, 0, 128, 0.6)', 'rgba(0, 128, 0, 0.6)', 'rgba(0, 255, 255, 0.6)', 'rgba(255, 0, 255, 0.6)', 'rgba(128, 128, 0, 0.6)', 'rgba(0, 0, 128, 0.6)' // Bleu marine\n              ],\n\n              borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(199, 199, 199, 1)', 'rgba(128, 0, 128, 1)', 'rgba(0, 128, 0, 1)', 'rgba(0, 255, 255, 1)', 'rgba(255, 0, 255, 1)', 'rgba(128, 128, 0, 1)', 'rgba(0, 0, 128, 1)' // Bleu marine\n              ]\n            }]\n          },\n\n          options: {\n            aspectRatio: 1,\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      }, error => {\n        this.errorMessage = 'Une erreur s\\' ' + error.message;\n      });\n    } else {\n      console.error('Failed to get canvas context');\n    }\n  }\n  static #_ = this.ɵfac = function StatPolicyComponent_Factory(t) {\n    return new (t || StatPolicyComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i1.PolicyService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatPolicyComponent,\n    selectors: [[\"app-stat-policy\"]],\n    viewQuery: function StatPolicyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.verticalChart = _t.first);\n      }\n    },\n    decls: 13,\n    vars: 3,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"list-group\"], [\"class\", \"list-group-item d-flex justify-content-between align-items-center\", 4, \"ngFor\", \"ngForOf\"], [\"verticalChart\", \"\"], [1, \"list-group-item\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"badge\", \"bg-primary\", \"rounded-pill\"]],\n    template: function StatPolicyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"stat-policy works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"h2\");\n        i0.ɵɵtext(4, \"Statistiques sur les politiques\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"ul\", 3);\n        i0.ɵɵtemplate(8, StatPolicyComponent_li_8_Template, 4, 2, \"li\", 4);\n        i0.ɵɵpipe(9, \"keyvalue\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 2);\n        i0.ɵɵelement(11, \"canvas\", null, 5);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 1, ctx.stats));\n      }\n    },\n    dependencies: [i2.NgForOf, i2.KeyValuePipe],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["PLATFORM_ID","isPlatformBrowser","Chart","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","stat_r2","key","value","StatPolicyComponent","constructor","platformId","policyService","ngOnInit","ngAfterViewInit","createChart","console","log","ctx","verticalChart","nativeElement","getContext","getPolicyStatistics","subscribe","data","MapList","labels","Object","keys","chartData","values","push","chart","type","datasets","label","backgroundColor","borderColor","options","aspectRatio","scales","y","beginAtZero","error","errorMessage","message","_","ɵɵdirectiveInject","i1","PolicyService","_2","selectors","viewQuery","StatPolicyComponent_Query","rf","ɵɵtemplate","StatPolicyComponent_li_8_Template","ɵɵelement","ɵɵproperty","ɵɵpipeBind1","stats"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\stat-policy\\stat-policy.component.ts","C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\stat-policy\\stat-policy.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, Inject , PLATFORM_ID } from '@angular/core';\r\nimport { KeyValuePipe } from '@angular/common';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport Chart from 'chart.js/auto';\r\nimport { PolicyService } from '../core/services/policy.service'; // Importez le service PolicyService\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-stat-policy',\r\n  templateUrl: './stat-policy.component.html',\r\n  styleUrls: ['./stat-policy.component.scss']\r\n})\r\nexport class StatPolicyComponent implements OnInit {\r\n  @ViewChild('verticalChart') verticalChart!: ElementRef<HTMLCanvasElement>;\r\n\r\n  MapList: any;\r\n  errorMessage: any;\r\n  stats: any;\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: Object,\r\n    private policyService: PolicyService // Injectez votre service ici\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n\r\n   \r\n  }\r\n  ngAfterViewInit() {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.createChart();\r\n    } else {\r\n      console.log('Skipping chart creation on the server');\r\n    }\r\n  }\r\n  createChart() {\r\n    const ctx = this.verticalChart.nativeElement.getContext('2d');\r\n\r\n    if (ctx) {\r\n        this.policyService.getPolicyStatistics().subscribe(\r\n            data => {\r\n                this.MapList = data;\r\n                const labels = Object.keys(data);\r\n                const chartData = Object.values(data);\r\n                chartData.push(100);\r\n\r\n                const chart = new Chart(ctx, {\r\n                    type: 'pie',\r\n                    data: {\r\n                        labels: labels,\r\n                        datasets: [{\r\n                            label: 'Statistique Politiques Par ',\r\n                            data: chartData,\r\n                            backgroundColor: [\r\n                                'rgba(255, 99, 132, 0.6)', // Rouge\r\n                                'rgba(54, 162, 235, 0.6)', // Bleu\r\n                                'rgba(255, 206, 86, 0.6)', // Jaune\r\n                                'rgba(75, 192, 192, 0.6)', // Vert\r\n                                'rgba(153, 102, 255, 0.6)', // Violet\r\n                                'rgba(255, 159, 64, 0.6)', // Orange\r\n                                'rgba(199, 199, 199, 0.6)', // Gris\r\n                                'rgba(128, 0, 128, 0.6)', // Pourpre\r\n                                'rgba(0, 128, 0, 0.6)', // Vert foncé\r\n                                'rgba(0, 255, 255, 0.6)', // Cyan\r\n                                'rgba(255, 0, 255, 0.6)', // Magenta\r\n                                'rgba(128, 128, 0, 0.6)', // Olive\r\n                                'rgba(0, 0, 128, 0.6)' // Bleu marine\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(255, 99, 132, 1)', // Rouge\r\n                                'rgba(54, 162, 235, 1)', // Bleu\r\n                                'rgba(255, 206, 86, 1)', // Jaune\r\n                                'rgba(75, 192, 192, 1)', // Vert\r\n                                'rgba(153, 102, 255, 1)', // Violet\r\n                                'rgba(255, 159, 64, 1)', // Orange\r\n                                'rgba(199, 199, 199, 1)', // Gris\r\n                                'rgba(128, 0, 128, 1)', // Pourpre\r\n                                'rgba(0, 128, 0, 1)', // Vert foncé\r\n                                'rgba(0, 255, 255, 1)', // Cyan\r\n                                'rgba(255, 0, 255, 1)', // Magenta\r\n                                'rgba(128, 128, 0, 1)', // Olive\r\n                                'rgba(0, 0, 128, 1)' // Bleu marine\r\n                            ]\r\n\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        aspectRatio: 1, // Permet de définir un ratio de 1:1 pour un graphique circulaire\r\n                        scales: {\r\n                            y: {\r\n                                beginAtZero: true\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            (error: HttpErrorResponse) => {\r\n                this.errorMessage = 'Une erreur s\\' ' + error.message;\r\n            }\r\n        );\r\n    } else {\r\n        console.error('Failed to get canvas context');\r\n    }\r\n}\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<p>stat-policy works!</p>\r\n\r\n<div class=\"container mt-5\">\r\n    <h2>Statistiques sur les politiques</h2>\r\n    \r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <ul class=\"list-group\">\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center\" *ngFor=\"let stat of stats | keyvalue\">\r\n                    {{ stat.key }}\r\n                    <span class=\"badge bg-primary rounded-pill\">{{ stat.value }}%</span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n            <canvas #verticalChart></canvas>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}