{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class ErrorInterceptor {\n  constructor(authenticationService) {\n    this.authenticationService = authenticationService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      if (err.status === 401) {\n        // auto logout if 401 response returned from api\n        this.authenticationService.logout();\n        location.reload();\n      }\n      const error = err.error.message || err.statusText;\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthenticationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["throwError","catchError","ErrorInterceptor","constructor","authenticationService","intercept","request","next","handle","pipe","err","status","logout","location","reload","error","message","statusText","_","i0","ɵɵinject","i1","AuthenticationService","_2","factory","ɵfac"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\core\\helpers\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthenticationService } from '../services/auth.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n                this.authenticationService.logout();\n                location.reload();\n            }\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }));\n    }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,gBAAgB;EACzBC,YAAoBC,qBAA4C;IAA5C,KAAAA,qBAAqB,GAArBA,qBAAqB;EAA2B;EAEpEC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAClD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAACR,UAAU,CAACS,GAAG,IAAG;MAC9C,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACpB;QACA,IAAI,CAACP,qBAAqB,CAACQ,MAAM,EAAE;QACnCC,QAAQ,CAACC,MAAM,EAAE;;MAGrB,MAAMC,KAAK,GAAGL,GAAG,CAACK,KAAK,CAACC,OAAO,IAAIN,GAAG,CAACO,UAAU;MACjD,OAAOjB,UAAU,CAACe,KAAK,CAAC;IAC5B,CAAC,CAAC,CAAC;EACP;EAAC,QAAAG,CAAA,G;qBAdQhB,gBAAgB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,qBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBrB,gBAAgB;IAAAsB,OAAA,EAAhBtB,gBAAgB,CAAAuB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}