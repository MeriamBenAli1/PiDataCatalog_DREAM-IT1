{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class EventService {\n  constructor() {\n    this.handler = new Subject();\n  }\n  /**\n   * Broadcast the event\n   * @param type type of event\n   * @param payload payload\n   */\n  broadcast(type, payload = {}) {\n    this.handler.next({\n      type,\n      payload\n    });\n  }\n  /**\n   * Subscribe to event\n   * @param type type of event\n   * @param callback call back function\n   */\n  subscribe(type, callback) {\n    return this.handler.pipe(filter(event => event.type === type)).pipe(map(event => event.payload)).subscribe(callback);\n  }\n  static #_ = this.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","map","filter","EventService","constructor","handler","broadcast","type","payload","next","subscribe","callback","pipe","event","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\core\\services\\event.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\ninterface Event {\r\n    type: string;\r\n    payload?: any;\r\n}\r\n\r\ntype EventCallback = (payload: any) => void;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class EventService {\r\n    private handler = new Subject<Event>();\r\n    constructor() { }\r\n\r\n    /**\r\n     * Broadcast the event\r\n     * @param type type of event\r\n     * @param payload payload\r\n     */\r\n    broadcast(type: string, payload = {}) {\r\n        this.handler.next({ type, payload });\r\n    }\r\n\r\n    /**\r\n     * Subscribe to event\r\n     * @param type type of event\r\n     * @param callback call back function\r\n     */\r\n    subscribe(type: string, callback: EventCallback): Subscription {\r\n        return this.handler.pipe(\r\n            filter(event => event.type === type)).pipe(\r\n                map(event => event.payload))\r\n            .subscribe(callback);\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAASA,OAAO,QAAsB,MAAM;AAC5C,SAASC,GAAG,EAAEC,MAAM,QAAQ,gBAAgB;;AAY5C,OAAM,MAAOC,YAAY;EAErBC,YAAA;IADQ,KAAAC,OAAO,GAAG,IAAIL,OAAO,EAAS;EACtB;EAEhB;;;;;EAKAM,SAASA,CAACC,IAAY,EAAEC,OAAO,GAAG,EAAE;IAChC,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC;MAAEF,IAAI;MAAEC;IAAO,CAAE,CAAC;EACxC;EAEA;;;;;EAKAE,SAASA,CAACH,IAAY,EAAEI,QAAuB;IAC3C,OAAO,IAAI,CAACN,OAAO,CAACO,IAAI,CACpBV,MAAM,CAACW,KAAK,IAAIA,KAAK,CAACN,IAAI,KAAKA,IAAI,CAAC,CAAC,CAACK,IAAI,CACtCX,GAAG,CAACY,KAAK,IAAIA,KAAK,CAACL,OAAO,CAAC,CAAC,CAC/BE,SAAS,CAACC,QAAQ,CAAC;EAC5B;EAAC,QAAAG,CAAA,G;qBAvBQX,YAAY;EAAA;EAAA,QAAAY,EAAA,G;WAAZZ,YAAY;IAAAa,OAAA,EAAZb,YAAY,CAAAc,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}