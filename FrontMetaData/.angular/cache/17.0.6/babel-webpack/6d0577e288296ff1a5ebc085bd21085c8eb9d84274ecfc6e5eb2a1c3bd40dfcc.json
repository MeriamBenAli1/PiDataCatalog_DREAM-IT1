{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"../services/authfake.service\";\nexport class AuthGuard {\n  constructor(router, authenticationService, authFackservice) {\n    this.router = router;\n    this.authenticationService = authenticationService;\n    this.authFackservice = authFackservice;\n  }\n  canActivate(route, state) {\n    if (environment.defaultauth === 'firebase') {\n      const currentUser = this.authenticationService.currentUser();\n      if (currentUser) {\n        // logged in so return true\n        return true;\n      }\n    } else {\n      const currentUser = this.authFackservice.currentUserValue;\n      if (currentUser) {\n        // logged in so return true\n        return true;\n      }\n    }\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/account/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService), i0.ɵɵinject(i3.AuthfakeauthenticationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","AuthGuard","constructor","router","authenticationService","authFackservice","canActivate","route","state","defaultauth","currentUser","currentUserValue","navigate","queryParams","returnUrl","url","_","i0","ɵɵinject","i1","Router","i2","AuthenticationService","i3","AuthfakeauthenticationService","_2","factory","ɵfac","providedIn"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthenticationService } from '../services/auth.service';\nimport { AuthfakeauthenticationService } from '../services/authfake.service';\n\nimport { environment } from '../../../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard  {\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService,\n        private authFackservice: AuthfakeauthenticationService\n    ) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        if (environment.defaultauth === 'firebase') {\n            const currentUser = this.authenticationService.currentUser();\n            if (currentUser) {\n                // logged in so return true\n                return true;\n            }\n        } else {\n            const currentUser = this.authFackservice.currentUserValue;\n            if (currentUser) {\n                // logged in so return true\n                return true;\n            }\n        }\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });\n        return false;\n    }\n}\n"],"mappings":"AAMA,SAASA,WAAW,QAAQ,mCAAmC;;;;;AAG/D,OAAM,MAAOC,SAAS;EAClBC,YACYC,MAAc,EACdC,qBAA4C,EAC5CC,eAA8C;IAF9C,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,qBAAqB,GAArBA,qBAAqB;IACrB,KAAAC,eAAe,GAAfA,eAAe;EACvB;EAEJC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACjE,IAAIR,WAAW,CAACS,WAAW,KAAK,UAAU,EAAE;MACxC,MAAMC,WAAW,GAAG,IAAI,CAACN,qBAAqB,CAACM,WAAW,EAAE;MAC5D,IAAIA,WAAW,EAAE;QACb;QACA,OAAO,IAAI;;KAElB,MAAM;MACH,MAAMA,WAAW,GAAG,IAAI,CAACL,eAAe,CAACM,gBAAgB;MACzD,IAAID,WAAW,EAAE;QACb;QACA,OAAO,IAAI;;;IAGnB;IACA,IAAI,CAACP,MAAM,CAACS,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEN,KAAK,CAACO;MAAG;IAAE,CAAE,CAAC;IACnF,OAAO,KAAK;EAChB;EAAC,QAAAC,CAAA,G;qBAxBQf,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,qBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,6BAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATxB,SAAS;IAAAyB,OAAA,EAATzB,SAAS,CAAA0B,IAAA;IAAAC,UAAA,EADI;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}