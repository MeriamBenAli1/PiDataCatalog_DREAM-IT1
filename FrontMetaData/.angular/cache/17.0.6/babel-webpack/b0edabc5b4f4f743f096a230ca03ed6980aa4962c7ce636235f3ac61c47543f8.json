{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"../services/authfake.service\";\nexport class JwtInterceptor {\n  constructor(authenticationService, authfackservice) {\n    this.authenticationService = authenticationService;\n    this.authfackservice = authfackservice;\n  }\n  intercept(request, next) {\n    if (environment.defaultauth === 'firebase') {\n      const currentUser = this.authenticationService.currentUser();\n      if (currentUser && currentUser.token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${currentUser.token}`\n          }\n        });\n      }\n    } else {\n      // add authorization header with jwt token if available\n      const currentUser = this.authfackservice.currentUserValue;\n      if (currentUser && currentUser.token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${currentUser.token}`\n          }\n        });\n      }\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.AuthfakeauthenticationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["environment","JwtInterceptor","constructor","authenticationService","authfackservice","intercept","request","next","defaultauth","currentUser","token","clone","setHeaders","Authorization","currentUserValue","handle","_","i0","ɵɵinject","i1","AuthenticationService","i2","AuthfakeauthenticationService","_2","factory","ɵfac"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\core\\helpers\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { AuthenticationService } from '../services/auth.service';\nimport { AuthfakeauthenticationService } from '../services/authfake.service';\n\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService, private authfackservice: AuthfakeauthenticationService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (environment.defaultauth === 'firebase') {\n            const currentUser = this.authenticationService.currentUser();\n            if (currentUser && currentUser.token) {\n                request = request.clone({\n                    setHeaders: {\n                        Authorization: `Bearer ${currentUser.token}`\n                    }\n                });\n            }\n        } else {\n            // add authorization header with jwt token if available\n            const currentUser = this.authfackservice.currentUserValue;\n            if (currentUser && currentUser.token) {\n                request = request.clone({\n                    setHeaders: {\n                        Authorization: `Bearer ${currentUser.token}`\n                    }\n                });\n            }\n        }\n        return next.handle(request);\n    }\n}\n"],"mappings":"AAOA,SAASA,WAAW,QAAQ,mCAAmC;;;;AAG/D,OAAM,MAAOC,cAAc;EACvBC,YAAoBC,qBAA4C,EAAUC,eAA8C;IAApG,KAAAD,qBAAqB,GAArBA,qBAAqB;IAAiC,KAAAC,eAAe,GAAfA,eAAe;EAAmC;EAE5HC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAClD,IAAIP,WAAW,CAACQ,WAAW,KAAK,UAAU,EAAE;MACxC,MAAMC,WAAW,GAAG,IAAI,CAACN,qBAAqB,CAACM,WAAW,EAAE;MAC5D,IAAIA,WAAW,IAAIA,WAAW,CAACC,KAAK,EAAE;QAClCJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;UACpBC,UAAU,EAAE;YACRC,aAAa,EAAE,UAAUJ,WAAW,CAACC,KAAK;;SAEjD,CAAC;;KAET,MAAM;MACH;MACA,MAAMD,WAAW,GAAG,IAAI,CAACL,eAAe,CAACU,gBAAgB;MACzD,IAAIL,WAAW,IAAIA,WAAW,CAACC,KAAK,EAAE;QAClCJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;UACpBC,UAAU,EAAE;YACRC,aAAa,EAAE,UAAUJ,WAAW,CAACC,KAAK;;SAEjD,CAAC;;;IAGV,OAAOH,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;EAC/B;EAAC,QAAAU,CAAA,G;qBAzBQf,cAAc,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,qBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,6BAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdtB,cAAc;IAAAuB,OAAA,EAAdvB,cAAc,CAAAwB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}