{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolicyService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8082/PIDataCatalog/api/policy'; // URL de l'API\n  }\n  // Méthode pour récupérer les données des politiques\n  getPolicy() {\n    return this.http.get(`${this.apiUrl}/get-policy`); // Utilisation du nouveau point de terminaison\n  }\n  // Méthode pour ajouter une politique\n  postPolicy(p) {\n    return this.http.post(`${this.apiUrl}/add-policy`, p);\n  }\n  ///supp\n  deletePolicy(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  getPolicyById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  updatePolicy(policy) {\n    return this.http.put(`${this.apiUrl}/update-policy/${policy.id}`, policy);\n  }\n  //pdf\n  downloadPolicyPdf() {\n    return this.http.get(`${this.apiUrl}/export/pdf`, {\n      responseType: 'blob',\n      headers: new HttpHeaders().append('Content-Type', 'application/pdf')\n    });\n  }\n  getPolicyStatistics() {\n    return this.http.get(`${this.apiUrl}/policy/statistics`);\n  }\n  static #_ = this.ɵfac = function PolicyService_Factory(t) {\n    return new (t || PolicyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PolicyService,\n    factory: PolicyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","PolicyService","constructor","http","apiUrl","getPolicy","get","postPolicy","p","post","deletePolicy","id","delete","getPolicyById","updatePolicy","policy","put","downloadPolicyPdf","responseType","headers","append","getPolicyStatistics","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\core\\services\\policy.service.ts"],"sourcesContent":["import { HttpClient , HttpHeaders  } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Policy } from '../models/policy';\nimport { Observable } from 'rxjs';\nimport { KeyValuePipe } from '@angular/common';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolicyService {\n  private apiUrl = 'http://localhost:8082/PIDataCatalog/api/policy'; // URL de l'API\n\n  constructor(private http: HttpClient) { }\n\n  // Méthode pour récupérer les données des politiques\n  getPolicy(): Observable<Policy[]> {\n    return this.http.get<Policy[]>(`${this.apiUrl}/get-policy`); // Utilisation du nouveau point de terminaison\n  }\n\n  // Méthode pour ajouter une politique\n  postPolicy(p: Policy): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/add-policy`, p);\n  }\n  ///supp\n  deletePolicy(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  getPolicyById(id: number): Observable<Policy> {\n    return this.http.get<Policy>(`${this.apiUrl}/${id}`);\n  }\n  \n\n  updatePolicy(policy:  any): Observable<Policy> {\n    return this.http.put<any>(`${this.apiUrl}/update-policy/${policy.id}`, policy);\n  }\n  //pdf\n  downloadPolicyPdf(): Observable<Blob> {\n    return this.http.get(`${this.apiUrl}/export/pdf`, {\n      responseType: 'blob',\n      headers: new HttpHeaders().append('Content-Type', 'application/pdf')\n    });\n\n}\n\n\ngetPolicyStatistics(): Observable<any> {\n  return this.http.get<any>(`${this.apiUrl}/policy/statistics`);\n}\n\n}\n"],"mappings":"AAAA,SAAsBA,WAAW,QAAS,sBAAsB;;;AAQhE,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gDAAgD,CAAC,CAAC;EAE3B;EAExC;EACAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,MAAM,aAAa,CAAC,CAAC,CAAC;EAC/D;EAEA;EACAG,UAAUA,CAACC,CAAS;IAClB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,aAAa,EAAEI,CAAC,CAAC;EAC5D;EACA;EACAE,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACR,MAAM,IAAIO,EAAE,EAAE,CAAC;EACjD;EACAE,aAAaA,CAACF,EAAU;IACtB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,IAAIO,EAAE,EAAE,CAAC;EACtD;EAGAG,YAAYA,CAACC,MAAY;IACvB,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAM,GAAG,IAAI,CAACZ,MAAM,kBAAkBW,MAAM,CAACJ,EAAE,EAAE,EAAEI,MAAM,CAAC;EAChF;EACA;EACAE,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,aAAa,EAAE;MAChDc,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,IAAInB,WAAW,EAAE,CAACoB,MAAM,CAAC,cAAc,EAAE,iBAAiB;KACpE,CAAC;EAEN;EAGAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAAClB,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,oBAAoB,CAAC;EAC/D;EAAC,QAAAkB,CAAA,G;qBAtCYrB,aAAa,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAb1B,aAAa;IAAA2B,OAAA,EAAb3B,aAAa,CAAA4B,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}