{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataTableService {\n  constructor(http) {\n    this.http = http;\n    // private apiUrl = 'http://localhost:8082/tables'; // Adjust the URL based on your actual backend endpoint\n    this.baseUrl = 'http://localhost:8082/PIDataCatalog/api';\n  }\n  getAllDataTables() {\n    return this.http.get(`${this.baseUrl}/getAllTables`);\n  }\n  getMetaDataForTable(tableId) {\n    return this.http.get(`${this.baseUrl}/tables/${tableId}/columns`);\n  }\n  getDataTable(id) {\n    return this.http.get(`${this.baseUrl}/tables/${id}`);\n  }\n  addMetadata(tableId, columnData) {\n    // Create HttpParams and append your data\n    let params = new HttpParams().set('name', columnData.name).set('description', columnData.description).set('type', columnData.type);\n    return this.http.post(`${this.baseUrl}/tables/${tableId}/metadata`, null, {\n      params\n    });\n  }\n  updateDescription(tableId, description) {\n    return this.http.post(`${this.baseUrl}/tables/${tableId}/description`, description, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  static #_ = this.ɵfac = function DataTableService_Factory(t) {\n    return new (t || DataTableService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataTableService,\n    factory: DataTableService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","DataTableService","constructor","http","baseUrl","getAllDataTables","get","getMetaDataForTable","tableId","getDataTable","id","addMetadata","columnData","params","set","name","description","type","post","updateDescription","headers","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\pages\\catalogs\\metadata-imports\\service\\data-table.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { DataTable } from '../models/DataTable';\nimport { Column } from '../models/metadata';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataTableService {\n // private apiUrl = 'http://localhost:8082/tables'; // Adjust the URL based on your actual backend endpoint\n\n  private baseUrl = 'http://localhost:8082/PIDataCatalog/api';\n\n  constructor(private http: HttpClient) { }\n\n  getAllDataTables(): Observable<DataTable[]> {\n    return this.http.get<DataTable[]>(`${this.baseUrl}/getAllTables`);\n  }\n  getMetaDataForTable(tableId: number): Observable<Column[]> {\n    return this.http.get<Column[]>(`${this.baseUrl}/tables/${tableId}/columns`);\n  }\n  getDataTable(id: number): Observable<DataTable> {\n    return this.http.get<DataTable>(`${this.baseUrl}/tables/${id}`);\n  }\n  addMetadata(tableId: number, columnData: any): Observable<any> {\n    // Create HttpParams and append your data\n    let params = new HttpParams()\n      .set('name', columnData.name)\n      .set('description', columnData.description)\n      .set('type', columnData.type);\n\n    return this.http.post(`${this.baseUrl}/tables/${tableId}/metadata`, null, { params });\n  }\n  updateDescription(tableId: number, description: string): Observable<any> {\n    return this.http.post(`${this.baseUrl}/tables/${tableId}/description`, description, {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\n\n \n}\n\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAS7D,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJzB;IAES,KAAAC,OAAO,GAAG,yCAAyC;EAEnB;EAExCC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAc,GAAG,IAAI,CAACF,OAAO,eAAe,CAAC;EACnE;EACAG,mBAAmBA,CAACC,OAAe;IACjC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,WAAWI,OAAO,UAAU,CAAC;EAC7E;EACAC,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACF,OAAO,WAAWM,EAAE,EAAE,CAAC;EACjE;EACAC,WAAWA,CAACH,OAAe,EAAEI,UAAe;IAC1C;IACA,IAAIC,MAAM,GAAG,IAAIb,UAAU,EAAE,CAC1Bc,GAAG,CAAC,MAAM,EAAEF,UAAU,CAACG,IAAI,CAAC,CAC5BD,GAAG,CAAC,aAAa,EAAEF,UAAU,CAACI,WAAW,CAAC,CAC1CF,GAAG,CAAC,MAAM,EAAEF,UAAU,CAACK,IAAI,CAAC;IAE/B,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAC,GAAG,IAAI,CAACd,OAAO,WAAWI,OAAO,WAAW,EAAE,IAAI,EAAE;MAAEK;IAAM,CAAE,CAAC;EACvF;EACAM,iBAAiBA,CAACX,OAAe,EAAEQ,WAAmB;IACpD,OAAO,IAAI,CAACb,IAAI,CAACe,IAAI,CAAC,GAAG,IAAI,CAACd,OAAO,WAAWI,OAAO,cAAc,EAAEQ,WAAW,EAAE;MAChFI,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;KAChD,CAAC;EACN;EAAC,QAAAC,CAAA,G;qBA7BYpB,gBAAgB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBzB,gBAAgB;IAAA0B,OAAA,EAAhB1B,gBAAgB,CAAA2B,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}