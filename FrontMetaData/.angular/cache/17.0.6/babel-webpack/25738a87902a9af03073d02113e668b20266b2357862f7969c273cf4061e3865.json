{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class LanguageService {\n  constructor(translate, cookieService) {\n    this.translate = translate;\n    this.cookieService = cookieService;\n    this.languages = ['en', 'es', 'de', 'it', 'ru', 'fr'];\n    let browserLang;\n    this.translate.addLangs(this.languages);\n    if (this.cookieService.check('lang')) {\n      browserLang = this.cookieService.get('lang');\n    } else {\n      browserLang = translate.getBrowserLang();\n    }\n    translate.use(browserLang.match(/en|es|de|it|ru/) ? browserLang : 'en');\n  }\n  setLanguage(lang) {\n    this.translate.use(lang);\n    this.cookieService.set('lang', lang);\n  }\n  static #_ = this.ɵfac = function LanguageService_Factory(t) {\n    return new (t || LanguageService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LanguageService,\n    factory: LanguageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LanguageService","constructor","translate","cookieService","languages","browserLang","addLangs","check","get","getBrowserLang","use","match","setLanguage","lang","set","_","i0","ɵɵinject","i1","TranslateService","i2","CookieService","_2","factory","ɵfac","providedIn"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\core\\services\\language.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n  public languages: string[] = ['en', 'es', 'de', 'it', 'ru', 'fr'];\n\n  constructor(public translate: TranslateService, private cookieService: CookieService) {\n    let browserLang;\n    this.translate.addLangs(this.languages);\n    if (this.cookieService.check('lang')) {\n      browserLang = this.cookieService.get('lang');\n    } else {\n      browserLang = translate.getBrowserLang();\n    }\n    translate.use(browserLang.match(/en|es|de|it|ru/) ? browserLang : 'en');\n  }\n\n  public setLanguage(lang) {\n    this.translate.use(lang);\n    this.cookieService.set('lang', lang);\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,eAAe;EAG1BC,YAAmBC,SAA2B,EAAUC,aAA4B;IAAjE,KAAAD,SAAS,GAATA,SAAS;IAA4B,KAAAC,aAAa,GAAbA,aAAa;IAF9D,KAAAC,SAAS,GAAa,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAG/D,IAAIC,WAAW;IACf,IAAI,CAACH,SAAS,CAACI,QAAQ,CAAC,IAAI,CAACF,SAAS,CAAC;IACvC,IAAI,IAAI,CAACD,aAAa,CAACI,KAAK,CAAC,MAAM,CAAC,EAAE;MACpCF,WAAW,GAAG,IAAI,CAACF,aAAa,CAACK,GAAG,CAAC,MAAM,CAAC;KAC7C,MAAM;MACLH,WAAW,GAAGH,SAAS,CAACO,cAAc,EAAE;;IAE1CP,SAAS,CAACQ,GAAG,CAACL,WAAW,CAACM,KAAK,CAAC,gBAAgB,CAAC,GAAGN,WAAW,GAAG,IAAI,CAAC;EACzE;EAEOO,WAAWA,CAACC,IAAI;IACrB,IAAI,CAACX,SAAS,CAACQ,GAAG,CAACG,IAAI,CAAC;IACxB,IAAI,CAACV,aAAa,CAACW,GAAG,CAAC,MAAM,EAAED,IAAI,CAAC;EACtC;EAAC,QAAAE,CAAA,G;qBAjBUf,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAftB,eAAe;IAAAuB,OAAA,EAAfvB,eAAe,CAAAwB,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}