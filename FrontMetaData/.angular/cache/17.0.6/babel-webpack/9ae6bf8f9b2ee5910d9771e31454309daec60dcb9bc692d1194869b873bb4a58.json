{"ast":null,"code":"import firebase from 'firebase/compat/app';\n// Add the Firebase products that you want to use\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    /**\n     * Registers the user with given details\n     */\n    this.registerUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n          var user = firebase.auth().currentUser;\n          resolve(user);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\n     * Login user with given details\n     */\n    this.loginUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithEmailAndPassword(email, password).then(user => {\n          // eslint-disable-next-line no-redeclare\n          var user = firebase.auth().currentUser;\n          resolve(user);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\n     * forget Password user with given details\n     */\n    this.forgetPassword = email => {\n      return new Promise((resolve, reject) => {\n        // tslint:disable-next-line: max-line-length\n        firebase.auth().sendPasswordResetEmail(email, {\n          url: window.location.protocol + '//' + window.location.host + '/login'\n        }).then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\n     * Logout the user\n     */\n    this.logout = () => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signOut().then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    this.setLoggeedInUser = user => {\n      sessionStorage.setItem('authUser', JSON.stringify(user));\n    };\n    /**\n     * Returns the authenticated user\n     */\n    this.getAuthenticatedUser = () => {\n      if (!sessionStorage.getItem('authUser')) {\n        return null;\n      }\n      return JSON.parse(sessionStorage.getItem('authUser'));\n    };\n    if (firebaseConfig) {\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          sessionStorage.setItem('authUser', JSON.stringify(user));\n        } else {\n          sessionStorage.removeItem('authUser');\n        }\n      });\n    }\n  }\n  /**\n   * Handle the error\n   * @param error error\n   */\n  _handleError(error) {\n    // tslint:disable-next-line: prefer-const\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n}\n// tslint:disable-next-line: variable-name\nlet _fireBaseBackend = null;\n/**\n * Initilize the backend\n * @param config configuration\n */\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n  return _fireBaseBackend;\n};\n/**\n * Returns the firebase backend\n */\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\nexport { initFirebaseBackend, getFirebaseBackend };","map":{"version":3,"names":["firebase","FirebaseAuthBackend","constructor","firebaseConfig","registerUser","email","password","Promise","resolve","reject","auth","createUserWithEmailAndPassword","then","user","currentUser","error","_handleError","loginUser","signInWithEmailAndPassword","forgetPassword","sendPasswordResetEmail","url","window","location","protocol","host","catch","logout","signOut","setLoggeedInUser","sessionStorage","setItem","JSON","stringify","getAuthenticatedUser","getItem","parse","initializeApp","onAuthStateChanged","removeItem","errorMessage","message","_fireBaseBackend","initFirebaseBackend","config","getFirebaseBackend"],"sources":["C:\\PIDataCatalogDREAMIT\\FrontMetaData\\src\\app\\authUtils.ts"],"sourcesContent":["import firebase from 'firebase/compat/app';\r\n// Add the Firebase products that you want to use\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\nclass FirebaseAuthBackend {\r\n    constructor(firebaseConfig) {\r\n        if (firebaseConfig) {\r\n            // Initialize Firebase\r\n            firebase.initializeApp(firebaseConfig);\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    sessionStorage.setItem('authUser', JSON.stringify(user));\r\n                } else {\r\n                    sessionStorage.removeItem('authUser');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registers the user with given details\r\n     */\r\n    registerUser = (email, password) => {\r\n        return new Promise((resolve, reject) => {\r\n            firebase.auth().createUserWithEmailAndPassword(email, password).then((user: any) => {\r\n                var user: any = firebase.auth().currentUser;\r\n                resolve(user);\r\n            }, (error) => {\r\n                reject(this._handleError(error));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Login user with given details\r\n     */\r\n    loginUser = (email, password) => {\r\n        return new Promise((resolve, reject) => {\r\n            firebase.auth().signInWithEmailAndPassword(email, password).then((user: any) => {\r\n                // eslint-disable-next-line no-redeclare\r\n                var user: any = firebase.auth().currentUser;\r\n                resolve(user);\r\n            }, (error) => {\r\n                reject(this._handleError(error));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * forget Password user with given details\r\n     */\r\n    forgetPassword = (email) => {\r\n        return new Promise((resolve, reject) => {\r\n            // tslint:disable-next-line: max-line-length\r\n            firebase.auth().sendPasswordResetEmail(email, { url: window.location.protocol + '//' + window.location.host + '/login' }).then(() => {\r\n                resolve(true);\r\n            }).catch((error) => {\r\n                reject(this._handleError(error));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logout the user\r\n     */\r\n    logout = () => {\r\n        return new Promise((resolve, reject) => {\r\n            firebase.auth().signOut().then(() => {\r\n                resolve(true);\r\n            }).catch((error) => {\r\n                reject(this._handleError(error));\r\n            });\r\n        });\r\n    }\r\n\r\n    setLoggeedInUser = (user) => {\r\n        sessionStorage.setItem('authUser', JSON.stringify(user));\r\n    }\r\n\r\n    /**\r\n     * Returns the authenticated user\r\n     */\r\n    getAuthenticatedUser = () => {\r\n        if (!sessionStorage.getItem('authUser')) {\r\n            return null;\r\n        }\r\n        return JSON.parse(sessionStorage.getItem('authUser'));\r\n    }\r\n\r\n    /**\r\n     * Handle the error\r\n     * @param error error\r\n     */\r\n    _handleError(error) {\r\n        // tslint:disable-next-line: prefer-const\r\n        var errorMessage = error.message;\r\n        return errorMessage;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: variable-name\r\nlet _fireBaseBackend = null;\r\n\r\n/**\r\n * Initilize the backend\r\n * @param config configuration\r\n */\r\nconst initFirebaseBackend = (config) => {\r\n    if (!_fireBaseBackend) {\r\n        _fireBaseBackend = new FirebaseAuthBackend(config);\r\n    }\r\n    return _fireBaseBackend;\r\n};\r\n\r\n/**\r\n * Returns the firebase backend\r\n */\r\nconst getFirebaseBackend = () => {\r\n    return _fireBaseBackend;\r\n};\r\n\r\nexport { initFirebaseBackend, getFirebaseBackend };\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C;AACA,OAAO,sBAAsB;AAC7B,OAAO,2BAA2B;AAElC,MAAMC,mBAAmB;EACrBC,YAAYC,cAAc;IAc1B;;;IAGA,KAAAC,YAAY,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAI;MAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;QACnCT,QAAQ,CAACU,IAAI,EAAE,CAACC,8BAA8B,CAACN,KAAK,EAAEC,QAAQ,CAAC,CAACM,IAAI,CAAEC,IAAS,IAAI;UAC/E,IAAIA,IAAI,GAAQb,QAAQ,CAACU,IAAI,EAAE,CAACI,WAAW;UAC3CN,OAAO,CAACK,IAAI,CAAC;QACjB,CAAC,EAAGE,KAAK,IAAI;UACTN,MAAM,CAAC,IAAI,CAACO,YAAY,CAACD,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IAED;;;IAGA,KAAAE,SAAS,GAAG,CAACZ,KAAK,EAAEC,QAAQ,KAAI;MAC5B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;QACnCT,QAAQ,CAACU,IAAI,EAAE,CAACQ,0BAA0B,CAACb,KAAK,EAAEC,QAAQ,CAAC,CAACM,IAAI,CAAEC,IAAS,IAAI;UAC3E;UACA,IAAIA,IAAI,GAAQb,QAAQ,CAACU,IAAI,EAAE,CAACI,WAAW;UAC3CN,OAAO,CAACK,IAAI,CAAC;QACjB,CAAC,EAAGE,KAAK,IAAI;UACTN,MAAM,CAAC,IAAI,CAACO,YAAY,CAACD,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IAED;;;IAGA,KAAAI,cAAc,GAAId,KAAK,IAAI;MACvB,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;QACnC;QACAT,QAAQ,CAACU,IAAI,EAAE,CAACU,sBAAsB,CAACf,KAAK,EAAE;UAAEgB,GAAG,EAAEC,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAG,IAAI,GAAGF,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAG;QAAQ,CAAE,CAAC,CAACb,IAAI,CAAC,MAAK;UAChIJ,OAAO,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CAACkB,KAAK,CAAEX,KAAK,IAAI;UACfN,MAAM,CAAC,IAAI,CAACO,YAAY,CAACD,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IAED;;;IAGA,KAAAY,MAAM,GAAG,MAAK;MACV,OAAO,IAAIpB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;QACnCT,QAAQ,CAACU,IAAI,EAAE,CAACkB,OAAO,EAAE,CAAChB,IAAI,CAAC,MAAK;UAChCJ,OAAO,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CAACkB,KAAK,CAAEX,KAAK,IAAI;UACfN,MAAM,CAAC,IAAI,CAACO,YAAY,CAACD,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IAED,KAAAc,gBAAgB,GAAIhB,IAAI,IAAI;MACxBiB,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACpB,IAAI,CAAC,CAAC;IAC5D,CAAC;IAED;;;IAGA,KAAAqB,oBAAoB,GAAG,MAAK;MACxB,IAAI,CAACJ,cAAc,CAACK,OAAO,CAAC,UAAU,CAAC,EAAE;QACrC,OAAO,IAAI;;MAEf,OAAOH,IAAI,CAACI,KAAK,CAACN,cAAc,CAACK,OAAO,CAAC,UAAU,CAAC,CAAC;IACzD,CAAC;IAjFG,IAAIhC,cAAc,EAAE;MAChB;MACAH,QAAQ,CAACqC,aAAa,CAAClC,cAAc,CAAC;MACtCH,QAAQ,CAACU,IAAI,EAAE,CAAC4B,kBAAkB,CAAEzB,IAAI,IAAI;QACxC,IAAIA,IAAI,EAAE;UACNiB,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACpB,IAAI,CAAC,CAAC;SAC3D,MAAM;UACHiB,cAAc,CAACS,UAAU,CAAC,UAAU,CAAC;;MAE7C,CAAC,CAAC;;EAEV;EAwEA;;;;EAIAvB,YAAYA,CAACD,KAAK;IACd;IACA,IAAIyB,YAAY,GAAGzB,KAAK,CAAC0B,OAAO;IAChC,OAAOD,YAAY;EACvB;;AAGJ;AACA,IAAIE,gBAAgB,GAAG,IAAI;AAE3B;;;;AAIA,MAAMC,mBAAmB,GAAIC,MAAM,IAAI;EACnC,IAAI,CAACF,gBAAgB,EAAE;IACnBA,gBAAgB,GAAG,IAAIzC,mBAAmB,CAAC2C,MAAM,CAAC;;EAEtD,OAAOF,gBAAgB;AAC3B,CAAC;AAED;;;AAGA,MAAMG,kBAAkB,GAAGA,CAAA,KAAK;EAC5B,OAAOH,gBAAgB;AAC3B,CAAC;AAED,SAASC,mBAAmB,EAAEE,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}